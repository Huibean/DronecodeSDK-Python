# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import camera_pb2, camera_pb2_grpc


class CameraMode:
    """ Generated by dcsdkgen """

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return {
                0: "UNKNOWN",
                1: "PHOTO",
                2: "VIDEO",
            }.get(response.camera_mode, None)


class CameraResult:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the CameraResult object """
        self.result = result
        self.result_str = result_str

    def __equals__(self, to_compare):
        """ Checks if two CameraResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # CameraResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __repr__(self):
        """ CameraResult in string representation """
        return "CameraResult" + ", ".join(
                self.result,
                self.result_str)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return CameraResult(
                response.camera_result.result,
                response.camera_result.result_str)


class CaptureInfo:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            position,
            attitude_quaternion,
            attitude_euler_angle,
            time_utc_us,
            is_success,
            index,
            file_url):
        """ Initializes the CaptureInfo object """
        self.position = position
        self.attitude_quaternion = attitude_quaternion
        self.attitude_euler_angle = attitude_euler_angle
        self.time_utc_us = time_utc_us
        self.is_success = is_success
        self.index = index
        self.file_url = file_url

    def __equals__(self, to_compare):
        """ Checks if two CaptureInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # CaptureInfo object
            return \
                (self.position == to_compare.position) and \
                (self.attitude_quaternion == to_compare.attitude_quaternion) and \
                (self.attitude_euler_angle == to_compare.attitude_euler_angle) and \
                (self.time_utc_us == to_compare.time_utc_us) and \
                (self.is_success == to_compare.is_success) and \
                (self.index == to_compare.index) and \
                (self.file_url == to_compare.file_url)

        except AttributeError:
            return False

    def __repr__(self):
        """ CaptureInfo in string representation """
        return "CaptureInfo" + ", ".join(
                self.position,
                self.attitude_quaternion,
                self.attitude_euler_angle,
                self.time_utc_us,
                self.is_success,
                self.index,
                self.file_url)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return CaptureInfo(
                response.capture_info.position,
                response.capture_info.attitude_quaternion,
                response.capture_info.attitude_euler_angle,
                response.capture_info.time_utc_us,
                response.capture_info.is_success,
                response.capture_info.index,
                response.capture_info.file_url)


class Position:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            latitude_deg,
            longitude_deg,
            absolute_altitude_m,
            relative_altitude_m):
        """ Initializes the Position object """
        self.latitude_deg = latitude_deg
        self.longitude_deg = longitude_deg
        self.absolute_altitude_m = absolute_altitude_m
        self.relative_altitude_m = relative_altitude_m

    def __equals__(self, to_compare):
        """ Checks if two Position are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Position object
            return \
                (self.latitude_deg == to_compare.latitude_deg) and \
                (self.longitude_deg == to_compare.longitude_deg) and \
                (self.absolute_altitude_m == to_compare.absolute_altitude_m) and \
                (self.relative_altitude_m == to_compare.relative_altitude_m)

        except AttributeError:
            return False

    def __repr__(self):
        """ Position in string representation """
        return "Position" + ", ".join(
                self.latitude_deg,
                self.longitude_deg,
                self.absolute_altitude_m,
                self.relative_altitude_m)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Position(
                response.position.latitude_deg,
                response.position.longitude_deg,
                response.position.absolute_altitude_m,
                response.position.relative_altitude_m)


class Quaternion:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            w,
            x,
            y,
            z):
        """ Initializes the Quaternion object """
        self.w = w
        self.x = x
        self.y = y
        self.z = z

    def __equals__(self, to_compare):
        """ Checks if two Quaternion are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Quaternion object
            return \
                (self.w == to_compare.w) and \
                (self.x == to_compare.x) and \
                (self.y == to_compare.y) and \
                (self.z == to_compare.z)

        except AttributeError:
            return False

    def __repr__(self):
        """ Quaternion in string representation """
        return "Quaternion" + ", ".join(
                self.w,
                self.x,
                self.y,
                self.z)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Quaternion(
                response.quaternion.w,
                response.quaternion.x,
                response.quaternion.y,
                response.quaternion.z)


class EulerAngle:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            roll_deg,
            pitch_deg,
            yaw_deg):
        """ Initializes the EulerAngle object """
        self.roll_deg = roll_deg
        self.pitch_deg = pitch_deg
        self.yaw_deg = yaw_deg

    def __equals__(self, to_compare):
        """ Checks if two EulerAngle are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # EulerAngle object
            return \
                (self.roll_deg == to_compare.roll_deg) and \
                (self.pitch_deg == to_compare.pitch_deg) and \
                (self.yaw_deg == to_compare.yaw_deg)

        except AttributeError:
            return False

    def __repr__(self):
        """ EulerAngle in string representation """
        return "EulerAngle" + ", ".join(
                self.roll_deg,
                self.pitch_deg,
                self.yaw_deg)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return EulerAngle(
                response.euler_angle.roll_deg,
                response.euler_angle.pitch_deg,
                response.euler_angle.yaw_deg)


class VideoStreamSettings:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            frame_rate_hz,
            horizontal_resolution_pix,
            vertical_resolution_pix,
            bit_rate_b_s,
            rotation_deg,
            uri):
        """ Initializes the VideoStreamSettings object """
        self.frame_rate_hz = frame_rate_hz
        self.horizontal_resolution_pix = horizontal_resolution_pix
        self.vertical_resolution_pix = vertical_resolution_pix
        self.bit_rate_b_s = bit_rate_b_s
        self.rotation_deg = rotation_deg
        self.uri = uri

    def __equals__(self, to_compare):
        """ Checks if two VideoStreamSettings are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # VideoStreamSettings object
            return \
                (self.frame_rate_hz == to_compare.frame_rate_hz) and \
                (self.horizontal_resolution_pix == to_compare.horizontal_resolution_pix) and \
                (self.vertical_resolution_pix == to_compare.vertical_resolution_pix) and \
                (self.bit_rate_b_s == to_compare.bit_rate_b_s) and \
                (self.rotation_deg == to_compare.rotation_deg) and \
                (self.uri == to_compare.uri)

        except AttributeError:
            return False

    def __repr__(self):
        """ VideoStreamSettings in string representation """
        return "VideoStreamSettings" + ", ".join(
                self.frame_rate_hz,
                self.horizontal_resolution_pix,
                self.vertical_resolution_pix,
                self.bit_rate_b_s,
                self.rotation_deg,
                self.uri)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return VideoStreamSettings(
                response.video_stream_settings.frame_rate_hz,
                response.video_stream_settings.horizontal_resolution_pix,
                response.video_stream_settings.vertical_resolution_pix,
                response.video_stream_settings.bit_rate_b_s,
                response.video_stream_settings.rotation_deg,
                response.video_stream_settings.uri)


class VideoStreamInfo:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            video_stream_settings,
            video_stream_status):
        """ Initializes the VideoStreamInfo object """
        self.video_stream_settings = video_stream_settings
        self.video_stream_status = video_stream_status

    def __equals__(self, to_compare):
        """ Checks if two VideoStreamInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # VideoStreamInfo object
            return \
                (self.video_stream_settings == to_compare.video_stream_settings) and \
                (self.video_stream_status == to_compare.video_stream_status)

        except AttributeError:
            return False

    def __repr__(self):
        """ VideoStreamInfo in string representation """
        return "VideoStreamInfo" + ", ".join(
                self.video_stream_settings,
                self.video_stream_status)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return VideoStreamInfo(
                response.video_stream_info.video_stream_settings,
                response.video_stream_info.video_stream_status)


class CameraStatus:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            video_on,
            photo_interval_on,
            used_storage_mib,
            available_storage_mib,
            total_storage_mib,
            recording_time_s,
            media_folder_name,
            storage_status):
        """ Initializes the CameraStatus object """
        self.video_on = video_on
        self.photo_interval_on = photo_interval_on
        self.used_storage_mib = used_storage_mib
        self.available_storage_mib = available_storage_mib
        self.total_storage_mib = total_storage_mib
        self.recording_time_s = recording_time_s
        self.media_folder_name = media_folder_name
        self.storage_status = storage_status

    def __equals__(self, to_compare):
        """ Checks if two CameraStatus are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # CameraStatus object
            return \
                (self.video_on == to_compare.video_on) and \
                (self.photo_interval_on == to_compare.photo_interval_on) and \
                (self.used_storage_mib == to_compare.used_storage_mib) and \
                (self.available_storage_mib == to_compare.available_storage_mib) and \
                (self.total_storage_mib == to_compare.total_storage_mib) and \
                (self.recording_time_s == to_compare.recording_time_s) and \
                (self.media_folder_name == to_compare.media_folder_name) and \
                (self.storage_status == to_compare.storage_status)

        except AttributeError:
            return False

    def __repr__(self):
        """ CameraStatus in string representation """
        return "CameraStatus" + ", ".join(
                self.video_on,
                self.photo_interval_on,
                self.used_storage_mib,
                self.available_storage_mib,
                self.total_storage_mib,
                self.recording_time_s,
                self.media_folder_name,
                self.storage_status)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return CameraStatus(
                response.camera_status.video_on,
                response.camera_status.photo_interval_on,
                response.camera_status.used_storage_mib,
                response.camera_status.available_storage_mib,
                response.camera_status.total_storage_mib,
                response.camera_status.recording_time_s,
                response.camera_status.media_folder_name,
                response.camera_status.storage_status)


class Setting:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            setting_id,
            setting_description,
            option):
        """ Initializes the Setting object """
        self.setting_id = setting_id
        self.setting_description = setting_description
        self.option = option

    def __equals__(self, to_compare):
        """ Checks if two Setting are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Setting object
            return \
                (self.setting_id == to_compare.setting_id) and \
                (self.setting_description == to_compare.setting_description) and \
                (self.option == to_compare.option)

        except AttributeError:
            return False

    def __repr__(self):
        """ Setting in string representation """
        return "Setting" + ", ".join(
                self.setting_id,
                self.setting_description,
                self.option)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Setting(
                response.setting.setting_id,
                response.setting.setting_description,
                response.setting.option)


class Option:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            option_id,
            option_description):
        """ Initializes the Option object """
        self.option_id = option_id
        self.option_description = option_description

    def __equals__(self, to_compare):
        """ Checks if two Option are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Option object
            return \
                (self.option_id == to_compare.option_id) and \
                (self.option_description == to_compare.option_description)

        except AttributeError:
            return False

    def __repr__(self):
        """ Option in string representation """
        return "Option" + ", ".join(
                self.option_id,
                self.option_description)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Option(
                response.option.option_id,
                response.option.option_description)


class SettingOptions:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            setting_id,
            setting_description,
            options):
        """ Initializes the SettingOptions object """
        self.setting_id = setting_id
        self.setting_description = setting_description
        self.options = options

    def __equals__(self, to_compare):
        """ Checks if two SettingOptions are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # SettingOptions object
            return \
                (self.setting_id == to_compare.setting_id) and \
                (self.setting_description == to_compare.setting_description) and \
                (self.options == to_compare.options)

        except AttributeError:
            return False

    def __repr__(self):
        """ SettingOptions in string representation """
        return "SettingOptions" + ", ".join(
                self.setting_id,
                self.setting_description,
                self.options)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return SettingOptions(
                response.setting_options.setting_id,
                response.setting_options.setting_description,
                response.setting_options.options)


class Camera(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Camera API """

    # Plugin name
    name = "Camera"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = camera_pb2_grpc.CameraServiceStub(channel)

    def _response_success(self, response):
        """ Checks if the request was successfull """
        return (response.action_result.result ==
                camera_pb2.ActionResult.SUCCESS)

    async def takePhoto(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.TakePhoto(camera_pb2.TakePhotoRequest())

        return self._response_success(response), response

    async def startPhotoInterval(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StartPhotoInterval(camera_pb2.StartPhotoIntervalRequest())

        return self._response_success(response), response

    async def stopPhotoInterval(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StopPhotoInterval(camera_pb2.StopPhotoIntervalRequest())

        return self._response_success(response), response

    async def startVideo(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StartVideo(camera_pb2.StartVideoRequest())

        return self._response_success(response), response

    async def stopVideo(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StopVideo(camera_pb2.StopVideoRequest())

        return self._response_success(response), response

    async def startVideoStreaming(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StartVideoStreaming(camera_pb2.StartVideoStreamingRequest())

        return self._response_success(response), response

    async def stopVideoStreaming(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StopVideoStreaming(camera_pb2.StopVideoStreamingRequest())

        return self._response_success(response), response

    async def setMode(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetMode(camera_pb2.SetModeRequest())

        return self._response_success(response), response

    async def mode(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeMode(
                    camera_pb2.SubscribeModeRequest()):
                yield CameraMode.parse_response(response)

    async def setVideoStreamSettings(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetVideoStreamSettings(camera_pb2.SetVideoStreamSettingsRequest())

        return self._response_success(response), response

    async def video_stream_info(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeVideoStreamInfo(
                    camera_pb2.SubscribeVideoStreamInfoRequest()):
                yield VideoStreamInfo.parse_response(response)

    async def capture_info(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeCaptureInfo(
                    camera_pb2.SubscribeCaptureInfoRequest()):
                yield CaptureInfo.parse_response(response)

    async def camera_status(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeCameraStatus(
                    camera_pb2.SubscribeCameraStatusRequest()):
                yield CameraStatus.parse_response(response)

    async def current_settings(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeCurrentSettings(
                    camera_pb2.SubscribeCurrentSettingsRequest()):
                yield Setting.parse_response(response)

    async def possible_setting_options(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribePossibleSettingOptions(
                    camera_pb2.SubscribePossibleSettingOptionsRequest()):
                yield SettingOptions.parse_response(response)

    async def setSetting(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetSetting(camera_pb2.SetSettingRequest())

        return self._response_success(response), response