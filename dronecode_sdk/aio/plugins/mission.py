# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import mission_pb2, mission_pb2_grpc


class Mission:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            mission_item):
        """ Initializes the Mission object """
        self.mission_item = mission_item

    def __equals__(self, to_compare):
        """ Checks if two Mission are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Mission object
            return \
                (self.mission_item == to_compare.mission_item)

        except AttributeError:
            return False

    def __repr__(self):
        """ Mission in string representation """
        return "Mission" + ", ".join(
                self.mission_item)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Mission(
                response.mission.mission_item)


class MissionItem:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            latitude_deg,
            longitude_deg,
            relative_altitude_m,
            speed_m_s,
            is_fly_through,
            gimbal_pitch_deg,
            gimbal_yaw_deg,
            camera_action,
            loiter_time_s):
        """ Initializes the MissionItem object """
        self.latitude_deg = latitude_deg
        self.longitude_deg = longitude_deg
        self.relative_altitude_m = relative_altitude_m
        self.speed_m_s = speed_m_s
        self.is_fly_through = is_fly_through
        self.gimbal_pitch_deg = gimbal_pitch_deg
        self.gimbal_yaw_deg = gimbal_yaw_deg
        self.camera_action = camera_action
        self.loiter_time_s = loiter_time_s

    def __equals__(self, to_compare):
        """ Checks if two MissionItem are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # MissionItem object
            return \
                (self.latitude_deg == to_compare.latitude_deg) and \
                (self.longitude_deg == to_compare.longitude_deg) and \
                (self.relative_altitude_m == to_compare.relative_altitude_m) and \
                (self.speed_m_s == to_compare.speed_m_s) and \
                (self.is_fly_through == to_compare.is_fly_through) and \
                (self.gimbal_pitch_deg == to_compare.gimbal_pitch_deg) and \
                (self.gimbal_yaw_deg == to_compare.gimbal_yaw_deg) and \
                (self.camera_action == to_compare.camera_action) and \
                (self.loiter_time_s == to_compare.loiter_time_s)

        except AttributeError:
            return False

    def __repr__(self):
        """ MissionItem in string representation """
        return "MissionItem" + ", ".join(
                self.latitude_deg,
                self.longitude_deg,
                self.relative_altitude_m,
                self.speed_m_s,
                self.is_fly_through,
                self.gimbal_pitch_deg,
                self.gimbal_yaw_deg,
                self.camera_action,
                self.loiter_time_s)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return MissionItem(
                response.mission_item.latitude_deg,
                response.mission_item.longitude_deg,
                response.mission_item.relative_altitude_m,
                response.mission_item.speed_m_s,
                response.mission_item.is_fly_through,
                response.mission_item.gimbal_pitch_deg,
                response.mission_item.gimbal_yaw_deg,
                response.mission_item.camera_action,
                response.mission_item.loiter_time_s)


class MissionProgress:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            current_item_index,
            mission_count):
        """ Initializes the MissionProgress object """
        self.current_item_index = current_item_index
        self.mission_count = mission_count

    def __equals__(self, to_compare):
        """ Checks if two MissionProgress are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # MissionProgress object
            return \
                (self.current_item_index == to_compare.current_item_index) and \
                (self.mission_count == to_compare.mission_count)

        except AttributeError:
            return False

    def __repr__(self):
        """ MissionProgress in string representation """
        return "MissionProgress" + ", ".join(
                self.current_item_index,
                self.mission_count)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return MissionProgress(
                response.mission_progress.current_item_index,
                response.mission_progress.mission_count)


class MissionResult:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the MissionResult object """
        self.result = result
        self.result_str = result_str

    def __equals__(self, to_compare):
        """ Checks if two MissionResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # MissionResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __repr__(self):
        """ MissionResult in string representation """
        return "MissionResult" + ", ".join(
                self.result,
                self.result_str)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return MissionResult(
                response.mission_result.result,
                response.mission_result.result_str)


class Mission(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Mission API """

    # Plugin name
    name = "Mission"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = mission_pb2_grpc.MissionServiceStub(channel)

    def _response_success(self, response):
        """ Checks if the request was successfull """
        return (response.action_result.result ==
                mission_pb2.ActionResult.SUCCESS)

    async def uploadMission(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.UploadMission(mission_pb2.UploadMissionRequest())

        return self._response_success(response), response

    async def downloadMission(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.downloadMission(mission_pb2.DownloadMissionRequest())

        return response

    async def startMission(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.StartMission(mission_pb2.StartMissionRequest())

        return self._response_success(response), response

    async def pauseMission(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.PauseMission(mission_pb2.PauseMissionRequest())

        return self._response_success(response), response

    async def setCurrentMissionItemIndex(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetCurrentMissionItemIndex(mission_pb2.SetCurrentMissionItemIndexRequest())

        return self._response_success(response), response

    async def getCurrentMissionItemIndex(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getCurrentMissionItemIndex(mission_pb2.GetCurrentMissionItemIndexRequest())

        return response

    async def getMissionCount(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getMissionCount(mission_pb2.GetMissionCountRequest())

        return response

    async def isMissionFinished(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.isMissionFinished(mission_pb2.IsMissionFinishedRequest())

        return response

    async def mission_progress(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeMissionProgress(
                    mission_pb2.SubscribeMissionProgressRequest()):
                yield MissionProgress.parse_response(response)

    async def getReturnToLaunchAfterMission(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getReturnToLaunchAfterMission(mission_pb2.GetReturnToLaunchAfterMissionRequest())

        return response

    async def setReturnToLaunchAfterMission(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetReturnToLaunchAfterMission(mission_pb2.SetReturnToLaunchAfterMissionRequest())

        return self._response_success(response), response