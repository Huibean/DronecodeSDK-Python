# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import gimbal_pb2, gimbal_pb2_grpc


class GimbalResult:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the GimbalResult object """
        self.result = result
        self.result_str = result_str

    def __equals__(self, to_compare):
        """ Checks if two GimbalResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # GimbalResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __repr__(self):
        """ GimbalResult in string representation """
        return "GimbalResult" + ", ".join(
                self.result,
                self.result_str)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return GimbalResult(
                response.gimbal_result.result,
                response.gimbal_result.result_str)


class Gimbal(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Gimbal API """

    # Plugin name
    name = "Gimbal"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = gimbal_pb2_grpc.GimbalServiceStub(channel)

    def _response_success(self, response):
        """ Checks if the request was successfull """
        return (response.action_result.result ==
                gimbal_pb2.ActionResult.SUCCESS)

    async def setPitchAndYaw(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetPitchAndYaw(gimbal_pb2.SetPitchAndYawRequest())

        return self._response_success(response), response