# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import telemetry_pb2, telemetry_pb2_grpc


class FixType:
    """ Generated by dcsdkgen """

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return {
                0: "NO_GPS",
                1: "NO_FIX",
                2: "FIX_2D",
                3: "FIX_3D",
                4: "FIX_DGPS",
                5: "RTK_FLOAT",
                6: "RTK_FIXED",
            }.get(response.fix_type, None)


class FlightMode:
    """ Generated by dcsdkgen """

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return {
                0: "UNKNOWN",
                1: "READY",
                2: "TAKEOFF",
                3: "HOLD",
                4: "MISSION",
                5: "RETURN_TO_LAUNCH",
                6: "LAND",
                7: "OFFBOARD",
                8: "FOLLOW_ME",
            }.get(response.flight_mode, None)


class Position:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            latitude_deg,
            longitude_deg,
            absolute_altitude_m,
            relative_altitude_m):
        """ Initializes the Position object """
        self.latitude_deg = latitude_deg
        self.longitude_deg = longitude_deg
        self.absolute_altitude_m = absolute_altitude_m
        self.relative_altitude_m = relative_altitude_m

    def __equals__(self, to_compare):
        """ Checks if two Position are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Position object
            return \
                (self.latitude_deg == to_compare.latitude_deg) and \
                (self.longitude_deg == to_compare.longitude_deg) and \
                (self.absolute_altitude_m == to_compare.absolute_altitude_m) and \
                (self.relative_altitude_m == to_compare.relative_altitude_m)

        except AttributeError:
            return False

    def __repr__(self):
        """ Position in string representation """
        return "Position" + ", ".join(
                self.latitude_deg,
                self.longitude_deg,
                self.absolute_altitude_m,
                self.relative_altitude_m)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Position(
                response.position.latitude_deg,
                response.position.longitude_deg,
                response.position.absolute_altitude_m,
                response.position.relative_altitude_m)


class Quaternion:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            w,
            x,
            y,
            z):
        """ Initializes the Quaternion object """
        self.w = w
        self.x = x
        self.y = y
        self.z = z

    def __equals__(self, to_compare):
        """ Checks if two Quaternion are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Quaternion object
            return \
                (self.w == to_compare.w) and \
                (self.x == to_compare.x) and \
                (self.y == to_compare.y) and \
                (self.z == to_compare.z)

        except AttributeError:
            return False

    def __repr__(self):
        """ Quaternion in string representation """
        return "Quaternion" + ", ".join(
                self.w,
                self.x,
                self.y,
                self.z)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Quaternion(
                response.quaternion.w,
                response.quaternion.x,
                response.quaternion.y,
                response.quaternion.z)


class EulerAngle:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            roll_deg,
            pitch_deg,
            yaw_deg):
        """ Initializes the EulerAngle object """
        self.roll_deg = roll_deg
        self.pitch_deg = pitch_deg
        self.yaw_deg = yaw_deg

    def __equals__(self, to_compare):
        """ Checks if two EulerAngle are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # EulerAngle object
            return \
                (self.roll_deg == to_compare.roll_deg) and \
                (self.pitch_deg == to_compare.pitch_deg) and \
                (self.yaw_deg == to_compare.yaw_deg)

        except AttributeError:
            return False

    def __repr__(self):
        """ EulerAngle in string representation """
        return "EulerAngle" + ", ".join(
                self.roll_deg,
                self.pitch_deg,
                self.yaw_deg)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return EulerAngle(
                response.euler_angle.roll_deg,
                response.euler_angle.pitch_deg,
                response.euler_angle.yaw_deg)


class SpeedNED:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            velocity_north_m_s,
            velocity_east_m_s,
            velocity_down_m_s):
        """ Initializes the SpeedNED object """
        self.velocity_north_m_s = velocity_north_m_s
        self.velocity_east_m_s = velocity_east_m_s
        self.velocity_down_m_s = velocity_down_m_s

    def __equals__(self, to_compare):
        """ Checks if two SpeedNED are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # SpeedNED object
            return \
                (self.velocity_north_m_s == to_compare.velocity_north_m_s) and \
                (self.velocity_east_m_s == to_compare.velocity_east_m_s) and \
                (self.velocity_down_m_s == to_compare.velocity_down_m_s)

        except AttributeError:
            return False

    def __repr__(self):
        """ SpeedNED in string representation """
        return "SpeedNED" + ", ".join(
                self.velocity_north_m_s,
                self.velocity_east_m_s,
                self.velocity_down_m_s)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return SpeedNED(
                response.speed_n_e_d.velocity_north_m_s,
                response.speed_n_e_d.velocity_east_m_s,
                response.speed_n_e_d.velocity_down_m_s)


class GPSInfo:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            num_satellites,
            fix_type):
        """ Initializes the GPSInfo object """
        self.num_satellites = num_satellites
        self.fix_type = fix_type

    def __equals__(self, to_compare):
        """ Checks if two GPSInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # GPSInfo object
            return \
                (self.num_satellites == to_compare.num_satellites) and \
                (self.fix_type == to_compare.fix_type)

        except AttributeError:
            return False

    def __repr__(self):
        """ GPSInfo in string representation """
        return "GPSInfo" + ", ".join(
                self.num_satellites,
                self.fix_type)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return GPSInfo(
                response.g_p_s_info.num_satellites,
                response.g_p_s_info.fix_type)


class Battery:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            voltage_v,
            remaining_percent):
        """ Initializes the Battery object """
        self.voltage_v = voltage_v
        self.remaining_percent = remaining_percent

    def __equals__(self, to_compare):
        """ Checks if two Battery are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Battery object
            return \
                (self.voltage_v == to_compare.voltage_v) and \
                (self.remaining_percent == to_compare.remaining_percent)

        except AttributeError:
            return False

    def __repr__(self):
        """ Battery in string representation """
        return "Battery" + ", ".join(
                self.voltage_v,
                self.remaining_percent)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Battery(
                response.battery.voltage_v,
                response.battery.remaining_percent)


class Health:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            is_gyrometer_calibration_ok,
            is_accelerometer_calibration_ok,
            is_magnetometer_calibration_ok,
            is_level_calibration_ok,
            is_local_position_ok,
            is_global_position_ok,
            is_home_position_ok):
        """ Initializes the Health object """
        self.is_gyrometer_calibration_ok = is_gyrometer_calibration_ok
        self.is_accelerometer_calibration_ok = is_accelerometer_calibration_ok
        self.is_magnetometer_calibration_ok = is_magnetometer_calibration_ok
        self.is_level_calibration_ok = is_level_calibration_ok
        self.is_local_position_ok = is_local_position_ok
        self.is_global_position_ok = is_global_position_ok
        self.is_home_position_ok = is_home_position_ok

    def __equals__(self, to_compare):
        """ Checks if two Health are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Health object
            return \
                (self.is_gyrometer_calibration_ok == to_compare.is_gyrometer_calibration_ok) and \
                (self.is_accelerometer_calibration_ok == to_compare.is_accelerometer_calibration_ok) and \
                (self.is_magnetometer_calibration_ok == to_compare.is_magnetometer_calibration_ok) and \
                (self.is_level_calibration_ok == to_compare.is_level_calibration_ok) and \
                (self.is_local_position_ok == to_compare.is_local_position_ok) and \
                (self.is_global_position_ok == to_compare.is_global_position_ok) and \
                (self.is_home_position_ok == to_compare.is_home_position_ok)

        except AttributeError:
            return False

    def __repr__(self):
        """ Health in string representation """
        return "Health" + ", ".join(
                self.is_gyrometer_calibration_ok,
                self.is_accelerometer_calibration_ok,
                self.is_magnetometer_calibration_ok,
                self.is_level_calibration_ok,
                self.is_local_position_ok,
                self.is_global_position_ok,
                self.is_home_position_ok)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return Health(
                response.health.is_gyrometer_calibration_ok,
                response.health.is_accelerometer_calibration_ok,
                response.health.is_magnetometer_calibration_ok,
                response.health.is_level_calibration_ok,
                response.health.is_local_position_ok,
                response.health.is_global_position_ok,
                response.health.is_home_position_ok)


class RCStatus:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            was_available_once,
            is_available,
            signal_strength_percent):
        """ Initializes the RCStatus object """
        self.was_available_once = was_available_once
        self.is_available = is_available
        self.signal_strength_percent = signal_strength_percent

    def __equals__(self, to_compare):
        """ Checks if two RCStatus are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # RCStatus object
            return \
                (self.was_available_once == to_compare.was_available_once) and \
                (self.is_available == to_compare.is_available) and \
                (self.signal_strength_percent == to_compare.signal_strength_percent)

        except AttributeError:
            return False

    def __repr__(self):
        """ RCStatus in string representation """
        return "RCStatus" + ", ".join(
                self.was_available_once,
                self.is_available,
                self.signal_strength_percent)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return RCStatus(
                response.r_c_status.was_available_once,
                response.r_c_status.is_available,
                response.r_c_status.signal_strength_percent)


class Telemetry(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Telemetry API """

    # Plugin name
    name = "Telemetry"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = telemetry_pb2_grpc.TelemetryServiceStub(channel)

    def _response_success(self, response):
        """ Checks if the request was successfull """
        return (response.action_result.result ==
                telemetry_pb2.ActionResult.SUCCESS)

    async def position(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribePosition(
                    telemetry_pb2.SubscribePositionRequest()):
                yield Position.parse_response(response)

    async def home(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeHome(
                    telemetry_pb2.SubscribeHomeRequest()):
                yield Position.parse_response(response)

    async def in_air(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeInAir(
                    telemetry_pb2.SubscribeInAirRequest()):
                yield response.is_in_air

    async def armed(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeArmed(
                    telemetry_pb2.SubscribeArmedRequest()):
                yield response.is_armed

    async def attitude_quaternion(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeAttitudeQuaternion(
                    telemetry_pb2.SubscribeAttitudeQuaternionRequest()):
                yield Quaternion.parse_response(response)

    async def attitude_euler(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeAttitudeEuler(
                    telemetry_pb2.SubscribeAttitudeEulerRequest()):
                yield EulerAngle.parse_response(response)

    async def camera_attitude_quaternion(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeCameraAttitudeQuaternion(
                    telemetry_pb2.SubscribeCameraAttitudeQuaternionRequest()):
                yield Quaternion.parse_response(response)

    async def camera_attitude_euler(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeCameraAttitudeEuler(
                    telemetry_pb2.SubscribeCameraAttitudeEulerRequest()):
                yield EulerAngle.parse_response(response)

    async def ground_speed_n_e_d(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeGroundSpeedNED(
                    telemetry_pb2.SubscribeGroundSpeedNEDRequest()):
                yield SpeedNED.parse_response(response)

    async def g_p_s_info(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeGPSInfo(
                    telemetry_pb2.SubscribeGPSInfoRequest()):
                yield GPSInfo.parse_response(response)

    async def battery(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeBattery(
                    telemetry_pb2.SubscribeBatteryRequest()):
                yield Battery.parse_response(response)

    async def flight_mode(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeFlightMode(
                    telemetry_pb2.SubscribeFlightModeRequest()):
                yield FlightMode.parse_response(response)

    async def health(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeHealth(
                    telemetry_pb2.SubscribeHealthRequest()):
                yield Health.parse_response(response)

    async def r_c_status(self):
        """ Generated by dcsdkgen """
        async for response in self._stub.SubscribeRCStatus(
                    telemetry_pb2.SubscribeRCStatusRequest()):
                yield RCStatus.parse_response(response)