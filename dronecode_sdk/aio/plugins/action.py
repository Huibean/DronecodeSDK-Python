# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import action_pb2, action_pb2_grpc


class ActionResult:
    """ Generated by dcsdkgen """

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the ActionResult object """
        self.result = result
        self.result_str = result_str

    def __equals__(self, to_compare):
        """ Checks if two ActionResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # ActionResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __repr__(self):
        """ ActionResult in string representation """
        return "ActionResult" + ", ".join(
                self.result,
                self.result_str)

    @staticmethod
    def parse_response(response):
        """ Parses a gRPC response """
        return ActionResult(
                response.action_result.result,
                response.action_result.result_str)


class Action(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Action API """

    # Plugin name
    name = "Action"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = action_pb2_grpc.ActionServiceStub(channel)

    def _response_success(self, response):
        """ Checks if the request was successfull """
        return (response.action_result.result ==
                action_pb2.ActionResult.SUCCESS)

    async def arm(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.Arm(action_pb2.ArmRequest())

        return self._response_success(response), response

    async def disarm(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.Disarm(action_pb2.DisarmRequest())

        return self._response_success(response), response

    async def takeoff(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.Takeoff(action_pb2.TakeoffRequest())

        return self._response_success(response), response

    async def land(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.Land(action_pb2.LandRequest())

        return self._response_success(response), response

    async def kill(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.Kill(action_pb2.KillRequest())

        return self._response_success(response), response

    async def returnToLaunch(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.ReturnToLaunch(action_pb2.ReturnToLaunchRequest())

        return self._response_success(response), response

    async def transitionToFixedWing(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.TransitionToFixedWing(action_pb2.TransitionToFixedWingRequest())

        return self._response_success(response), response

    async def transitionToMulticopter(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.TransitionToMulticopter(action_pb2.TransitionToMulticopterRequest())

        return self._response_success(response), response

    async def getTakeoffAltitude(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getTakeoffAltitude(action_pb2.GetTakeoffAltitudeRequest())

        return response

    async def setTakeoffAltitude(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetTakeoffAltitude(action_pb2.SetTakeoffAltitudeRequest())

        return self._response_success(response), response

    async def getMaximumSpeed(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getMaximumSpeed(action_pb2.GetMaximumSpeedRequest())

        return response

    async def setMaximumSpeed(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetMaximumSpeed(action_pb2.SetMaximumSpeedRequest())

        return self._response_success(response), response

    async def getReturnToLaunchAltitude(self):
        """ Generated by dcsdkgen

        :returns: requested value
        """

        response = await self._stub.getReturnToLaunchAltitude(action_pb2.GetReturnToLaunchAltitudeRequest())

        return response

    async def setReturnToLaunchAltitude(self):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        response = await self._stub.SetReturnToLaunchAltitude(action_pb2.SetReturnToLaunchAltitudeRequest())

        return self._response_success(response), response